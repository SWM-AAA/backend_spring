import com.sun.security.ntlm.Server
import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI
import org.springframework.boot.gradle.tasks.bundling.BootJar

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id "org.asciidoctor.jvm.convert" version "3.3.2"
	// add //
	id "com.gorylenko.gradle-git-properties" version "2.4.1"
	id "com.epages.restdocs-api-spec" version "0.18.4"
	// add //
	id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'com.aaa'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

//swaggerSources {
//	sample {
//		setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
//	}
//}

ext.profile = (!project.hasProperty('profile') || !profile) ? 'local' : profile

ext {
	snippetsDir = file('build/generated-snippets')
}

tasks.named("test") {
	if (profile == 'local') {
//		outputs.dir snippetsDir
		useJUnitPlatform()
		environment "DB_NAME", "zeppy_db"
		environment "POSTGRESQL_PORT", "5432"
		environment "POSTGRESQL_LOCAL_USERNAME", "postgres"
		environment "POSTGRESQL_LOCAL_PASSWORD", "0102"
	}
}

tasks.register("restDocsTest", Test) {
	outputs.dir snippetsDir
	useJUnitPlatform {
		includeTags("restDocs")
	}

	finalizedBy "asciidoctor"
	finalizedBy "openapi3"
}

tasks.named("asciidoctor") {
	dependsOn restDocsTest
	dependsOn test

	inputs.dir snippetsDir
	configurations "asciidoctorExt"
	baseDirFollowsSourceDir() // 원본파일작업은 .adoc 디렉터리 기준
}

openapi3 {
	server = 'http://localhost:8080'
	title = 'spring-rest-docs-guide'
	description = 'Spring REST Docs 테스트 생성물 생성시 추가생성되는 OpenAPI 문서이용'
	version = "${project.version}"
//	outputFileNamePrefix = 'open-api-3.0.1'
	format = 'yaml'

	// add
//	outputDirectory = 'build/resources/main/static/docs'
}

tasks.register("apiBuild", GradleBuild) {
	tasks = ["clean", "restDocsTest", "build"]
}

springBoot {
	buildInfo()
}

gitProperties {
	dateFormat = "yyyy-MM-dd'T'HH:mm:ss.Zz"
	dateFormatTimeZone = "Asia/Seoul"
	failOnNoGitDirectory = false
}

bootJar {
//	dependsOn generateSwaggerUISample
//	from("${generateSwaggerUISample.outputDir}") {
//		into 'static/docs'
//	}
	dependsOn(':openapi3')
	dependsOn asciidoctor
	duplicatesStrategy = DuplicatesStrategy.INCLUDE

//	from("swagger-ui") {
//		into "BOOT-INF/classes/static/swagger"
//	}
	from("${asciidoctor.outputDir}") {
		into "BOOT-INF/classes/static/docs"
	}
//	from("build/api-spec") {
//		into "BOOT-INF/classes/static/swagger"
//	}

	archiveFileName.set "application.jar"
}

tasks.withType(GenerateSwaggerUI) {
	dependsOn 'openapi3'

	doFirst {
		def swaggerUIFile = file("${openapi3.outputDirectory}/openapi3.yaml")

		def securitySchemesContent = "  securitySchemes:\n" +  \
                                      "    Bearer Auth:\n" +  \
                                      "      type: http, Bearer\n" +  \
                                      "      name: Authorization\n" +  \
                                      "      in: header\n" + \
                                      "security:\n" +
				"  - APIKey: []  # Apply the security scheme here"

		swaggerUIFile.append securitySchemesContent
	}

	delete file("src/main/resources/static/docs/")
	copy {
		from "build/resources/main/static/docs"
		into "src/main/resources/static/docs/"
	}
}


// 리소스 디렉토리 추가
sourceSets {
	main {
		resources {
			srcDirs "src/main/resources-env/${profile}"
		}
	}
}

java {
	sourceCompatibility = '17'
}

dependencies {
	// add //
//	implementation("org.springdoc:springdoc-openapi-ui:1.6.11")
//	implementation("org.springdoc:springdoc-openapi-webmvc-core:1.6.11")
//	implementation 'javax.xml.bind:jaxb-api:2.3.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
//	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '2.0.2'

//	testImplementation("com.epages:restdocs-api-spec:0.18.4")
	testImplementation("com.epages:restdocs-api-spec-mockmvc:0.18.4")
	// add //
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation ('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.junit.platform:junit-platform-launcher'
	implementation 'org.checkerframework:checker-qual:3.11.0'

	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.security:spring-security-test'
	// JWT dependencies
	implementation 'com.auth0:java-jwt:4.2.1'

	// spring rest docs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	// spring boot oauth2 library
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

//	implementation 'org.springdoc:springdoc-openapi-ui:1.6.11'
	implementation 'com.epages:restdocs-api-spec-openapi3-generator:0.17.1'

	implementation 'org.hibernate.validator:hibernate-validator:7.0.2.Final'

	// AWS SDK
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.1.RELEASE'
	testImplementation 'io.findify:s3mock_2.13:0.2.6'

	// websocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	swaggerUI 'org.webjars:swagger-ui:4.11.1'
}