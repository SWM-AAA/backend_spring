// add
buildscript {
	ext {
		restdocsApiSpecVersion = '0.17.1'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.1'
	id 'io.spring.dependency-management' version '1.1.0'
	// spring rest docs
	id "org.asciidoctor.jvm.convert" version "3.3.2"

	// add
	id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
	id 'org.hidetake.swagger.generator' version '2.18.2'
}

// profile의 기본값 local로 설정
ext.profile = (!project.hasProperty('profile') || !profile) ? 'dev' : profile

ext {
  snippetsDir = file('build/generated-snippets')
}

test {
  if (profile == 'local') {
	outputs.dir snippetsDir
	useJUnitPlatform()
  }
	environment "DB_NAME", "zeppy_db"
	environment "POSTGRESQL_PORT", "5432"
	environment "POSTGRESQL_LOCAL_USERNAME", "test"
	environment "POSTGRESQL_LOCAL_PASSWORD", "test"
}

asciidoctor.doFirst {
	delete file("src/main/resources/static/docs")
}

task CreateDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

bootJar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	if (profile == 'local') {
		dependsOn CreateDocument
	}
	from("${asciidoctor.outputDir}") {
		into 'static/docs'
	}
}

build {
	if (profile == 'local') {
		dependsOn CreateDocument
	}
}

asciidoctor {
  inputs.dir snippetsDir
  configurations 'asciidoctorExt'
  baseDirFollowsSourceFile()
  dependsOn test
}

// 리소스 디렉토리 추가
sourceSets {
    main {
        resources {
            srcDirs "src/main/resources-env/${profile}"
        }
    }
}

group = 'com.aaa'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	// spring rest docs
	asciidoctorExt
	compileOnly {
		extendsFrom annotationProcessor
	}
}

// SwaggerUI 설정
swaggerSources {
	sample {
		setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
	}
}

openapi3 {
	server = "http://localhost:8080"
	title = "API 문서"
	description = "RestDocsWithSwagger Docs"

	version = "0.0.1"
	format = "yml"
}

tasks.withType(GenerateSwaggerUI) {
	dependsOn 'openapi3'
	doFirst {
		def swaggerUIFile = file("${openapi3.outputDirectory}/openapi3.yaml")

		def securitySchemesContent =  "  securitySchemes:\n" +  \
                                      "    APIKey:\n" +  \
                                      "      type: apiKey\n" +  \
                                      "      name: Authorization\n" +  \
                                      "      in: header\n" + \
                                      "security:\n" +
				"  - APIKey: []  # Apply the security scheme here"

		swaggerUIFile.append securitySchemesContent
	}
}

bootJar {
	dependsOn generateSwaggerUISample
	from("${generateSwaggerUISample.outputDir}") {
		into 'static/docs'
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation ('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.junit.platform:junit-platform-launcher'
	implementation 'org.checkerframework:checker-qual:3.11.0'

	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.security:spring-security-test'
	// JWT dependencies
	implementation 'com.auth0:java-jwt:4.2.1'

	// spring rest docs
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	testImplementation "com.epages:restdocs-api-spec-mockmvc:$restdocsApiSpecVersion"
	// Swagger UI 웹자원
	swaggerUI 'org.webjars:swagger-ui:4.11.1'

	// spring boot oauth2 library
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	implementation 'org.springdoc:springdoc-openapi-ui:1.6.11'

	implementation 'org.hibernate.validator:hibernate-validator:7.0.2.Final'

	// AWS SDK
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.1.RELEASE'
	testImplementation 'io.findify:s3mock_2.13:0.2.6'

    // websocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

}